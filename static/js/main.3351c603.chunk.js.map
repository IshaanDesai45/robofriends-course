{"version":3,"sources":["serviceWorker.js","components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","components/SearchBox/SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","Scroll","props","children","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gSAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCaSC,G,YAZF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACnB,OACI,yBAAKC,UAAU,yDACP,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACI,4BAAKJ,GACL,2BAAIC,OCVTI,EAZE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGf,OACI,6BACKA,EAAOC,KAAI,SAACC,EAAKC,GACtB,OAAO,kBAAC,EAAD,CAAMV,GAAIO,EAAOG,GAAGV,GAAIW,IAAMJ,EAAOG,GAAGV,GAAKC,KAAMM,EAAOG,GAAGT,KAAMC,MAAOK,EAAOG,GAAGR,aCEpFU,G,MARA,SAACC,GACZ,OACI,yBAAKV,UAAU,UACVU,EAAMC,YCUJC,G,MAZG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACA,2BACAb,UAAU,sCACVc,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCyCAI,G,wDAxCX,aAAc,IAAD,8BACT,gBAgBJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAhBxC,EAAKC,MAAO,CACRpB,OAAQ,GACRiB,YAAc,IAJT,E,gEASO,IAAD,OACfI,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAAChB,OAAOyB,S,+BASjC,IAAD,OACEC,EAAiBC,KAAKP,MAAMpB,OAAO4B,QAAO,SAAAC,GAC5C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEpE,OAAgC,IAA7BH,KAAKP,MAAMpB,OAAOgC,OACV,uCAGH,yBAAKpC,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWa,aAAckB,KAAKb,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWd,OAAQ0B,U,GAlCzBO,IAAMC,YCFxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACI,kBAAC,EAAD,QAINC,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3351c603.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nimport './Card.css';\r\nimport 'tachyons'\r\n\r\n// class Card extends Component{\r\n//     render(){\r\n//         return (\r\n//             <div className=\" tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5 \">\r\n//                 <img src={`https://robohash.org/${this.props.id}?size=200x200`} alt=\"robots\" />\r\n//                 <div>\r\n//                     <h2>{this.props.name}</h2>\r\n//                     <p>{this.props.email}</p>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst Card = ({id,name,email})=>{\r\n    return(\r\n        <div className=\" tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5 \">\r\n                <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n                <div>\r\n                    <h3>{name}</h3>\r\n                    <p>{email}</p>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card'\r\n\r\nconst CardList = ({robots})=>{\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            {robots.map((user,i)=>{\r\n        return <Card id={robots[i].id} key ={robots[i].id}  name={robots[i].name} email={robots[i].email} />\r\n    })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nimport './Scroll.css'\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div className=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n    <input \r\n    className=\"pa3 tc ba b--green bg-lightest-blue\"\r\n    type=\"search\" \r\n    placeholder='search robots'\r\n    onChange= {searchChange}\r\n    />\r\n    \r\n    )   \r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport ClassList from './components/CardList/CardList'\r\n// import robots from './robots'\r\nimport Scroll from './components/Scroll/Scroll'\r\nimport SearchBox from './components/SearchBox/SearchBox'\r\nimport './App.css'\r\n// import './App.css';\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state= {\r\n            robots: [],\r\n            searchfield : ''\r\n        }\r\n       \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response => response.json())   \r\n        .then(users => {this.setState({robots:users})})\r\n        // .then( users => {})\r\n        \r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value })\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1>loading</h1>\r\n        }else{\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ClassList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Hello from './components/Hello/Hello';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App.js';\n// import {robots} from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n        <App />\n    </div>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}